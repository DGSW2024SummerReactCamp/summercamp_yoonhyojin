스프레드 연산자 (...)를 사용한 깊은 복사와 얕은 복사는 객체를 복사할 때의 차이를 설명

얕은 복사 (Shallow Copy):
스프레드 연산자를 사용하여 객체를 복사할 때 상위 레벨의 속성만 복사됩니다.
내부의 객체나 배열은 원본과 참조를 공유합니다.

깊은 복사 (Deep Copy):
스프레드 연산자를 사용한 깊은 복사는 기본적으로 불가능합니다.
깊은 복사를 하려면 추가적인 방법이 필요합니다. JSON을 이용한 방법


useState:
목적: 컴포넌트의 상태를 관리합니다.
특징: 상태 값과 상태를 업데이트하는 함수를 반환합니다. 상태 값이 변경되면 컴포넌트가 리렌더링됩니다.


useRef:
목적: DOM 요소나 컴포넌트 인스턴스에 대한 참조를 유지하거나, 변경 가능한 변수를 관리합니다.
특징: useRef로 생성된 객체는 리렌더링 사이에 값을 유지합니다. 하지만 변경해도 컴포넌트는 리렌더링되지 않습니다.


useReducer:
목적: 복잡한 상태 로직을 관리하거나 여러 상태 변수를 다루는 경우에 유용합니다.
특징: useReducer는 리듀서 함수와 초기 상태를 받아 상태와 디스패치 함수를 반환합니다. dispatch를 호출하면 리듀서가 상태를 업데이트합니다.


기본 사용:
useEffect는 두 개의 인수를 받습니다: 첫 번째는 부수 효과를 수행하는 함수이고, 두 번째는 의존성 배열입니다. 의존성 배열을 통해 어떤 값이 변경될 때 useEffect가 다시 실행될지를 지정할 수 있습니다.
기본적으로 매 렌더링마다 부수 효과 함수가 실행됩니다.

의존성 배열:

의존성 배열을 빈 배열로 전달하면, 부수 효과 함수는 컴포넌트가 마운트될 때 한 번만 실행됩니다.
배열에 특정 변수를 포함시키면, 그 변수의 값이 변경될 때만 부수 효과 함수가 실행됩니다.